import pathlib
import shutil
from contextlib import nullcontext as does_not_raise

import pytest

from cumulus_library import study_manifest
from cumulus_library.actions import (
    builder,
    file_generator,
)


@pytest.mark.parametrize(
    "study,external", [("study_python_valid", False), ("study_python_s3", True)]
)
def test_generate_sql(mock_db_config, tmp_path, study, external):
    with does_not_raise():
        shutil.copytree(
            f"{pathlib.Path(__file__).resolve().parents[1]}/test_data/{study}",
            f"{tmp_path}/{study}/",
        )
        manifest = study_manifest.StudyManifest(study_path=pathlib.Path(f"{tmp_path}/{study}/"))
        file_generator.run_generate_sql(manifest=manifest, config=mock_db_config)
        files = list(pathlib.Path(f"{tmp_path}/{study}/reference_sql/").glob("*"))
        files = [str(x) for x in files]
        assert len(files) == 2
        assert "module1.sql" in ",".join(files)
        for file in files:
            if file.endswith("module1.sql"):
                with open(file) as f:
                    query = "\n".join(line.rstrip() for line in f)
        assert "This sql was autogenerated" in query
        assert f"{study}__table" in query
        if external:
            assert "specific_bucket/databases/db1" not in query
            assert "bucket/db_path" in query


def test_generate_md(mock_db_config, tmp_path):
    with does_not_raise():
        shutil.copytree(
            f"{pathlib.Path(__file__).resolve().parents[1]}/test_data/study_python_valid",
            f"{tmp_path}/study_python_valid/",
        )
        manifest = study_manifest.StudyManifest(
            study_path=pathlib.Path(f"{tmp_path}/study_python_valid/")
        )
        builder.build_study(config=mock_db_config, manifest=manifest, prepare=False, data_path=None)
        file_generator.run_generate_markdown(config=mock_db_config, manifest=manifest)
        with open(f"{tmp_path}/study_python_valid/study_python_valid_generated.md") as f:
            generated_md = f.read()
        expected_table = """### study_python_valid__table

|Column| Type  |Description|
|------|-------|-----------|
|test  |INTEGER|           |"""
        assert expected_table in generated_md
