-- noqa: disable=all
-- This sql was autogenerated as a reference example using the library
-- CLI. Its format is tied to the specific database it was run against,
-- and it may not be correct for all databases. Use the CLI's build 
-- option to derive the best SQL for your dataset.

-- ###########################################################

CREATE TABLE IF NOT EXISTS "main"."core__location_dn_type"
AS (
    SELECT * FROM (
        VALUES
        (cast(NULL AS varchar),cast(NULL AS bigint),cast(NULL AS varchar),cast(NULL AS varchar),cast(NULL AS varchar),cast(NULL AS boolean))
    )
        AS t ("id","row","code","system","display","userSelected")
    WHERE 1 = 0 -- ensure empty table
);

-- ###########################################################




-- This table includes all fields of interest to the US Core Location profile.
-- BUT ADDING:
-- * the `identifier` field
-- * the `alias` field, because it's similarly useful as name
-- * the `type` field, because it's helpful for classification
-- * the `partOf` field, because it could be helpful for classification
--
-- US Core profile for reference:
-- * https://hl7.org/fhir/us/core/STU4/StructureDefinition-us-core-location.html

CREATE TABLE core__location AS
WITH flat AS (
    SELECT
        src.id,
        src.alias,
        src.status,
        src.name,
        src.managingOrganization.reference AS managing_organization_ref,
        src.partOf.reference AS part_of_ref
    FROM location AS src
),

identifiers AS (WITH
        data_and_row_num AS (
            SELECT
                t.id AS id,
                generate_subscripts(t."identifier", 1) AS row,
                UNNEST(t."identifier") AS "identifier" -- must unnest in SELECT here
            FROM location AS t
        )
        SELECT
            id,
            row,
            "identifier"
        FROM data_and_row_num)

SELECT
    flat.id,

    identifiers.identifier.value AS identifier_value,
    identifiers.identifier.system AS identifier_system,

    flat.status,
    flat.name,
    -- Combine name and aliases into one big comma delineated list, for convenience of searching
    array_join(
        CASE
        WHEN flat.name IS NULL AND flat.alias IS NULL THEN NULL
        WHEN flat.name IS NULL THEN flat.alias
        WHEN flat.alias IS NULL THEN [flat.name]
        ELSE [flat.name] || flat.alias
    END, ', '
    ) AS "alias", -- noqa: RF06

    dn_type.code AS type_code,
    dn_type.system AS type_system,
    dn_type.display AS type_display,

    concat('Location/', flat.id) AS location_ref,
    flat.managing_organization_ref,
    flat.part_of_ref

FROM flat
LEFT JOIN core__location_dn_type AS dn_type ON flat.id = dn_type.id
LEFT JOIN identifiers ON flat.id = identifiers.id;
