{%- macro comma_delineate(loop) -%}
{%- if not loop.last -%}
, 
{%- endif -%}
{%- endmacro -%}

{%- macro secondary_resource(fhir_resource) -%}
{%- if fhir_resource in ( 'document', 'encounter', 'observation') -%}
{{ fhir_resource }}
{%- elif fhir_resource == 'condition' -%}
encounter
{%- else -%}
{# implicit null #}
{%- endif -%}
{%- endmacro -%}

{%- macro column_or_alias(count_col) %}
{%- if not count_col.alias -%}
{{ count_col.name }}
{%- else -%}
{{ count_col.alias }}
{%- endif -%}
{%- endmacro -%}

{%- set secondary = secondary_resource(fhir_resource) -%}

-- noqa: disable=LT02{# LT02 is a indentation rule that overfires in the where
clause construction; it simultaneously asks for indentation of 4 and 8 spaces. #}
CREATE TABLE {{ table_name }} AS (
    WITH 
    {%- if filter_resource %}
    filtered_table AS (
        SELECT
            s.subject_ref,
            {%- if secondary %}
            s.{{ secondary }}_ref,
            {%- endif -%}
            {%- if fhir_resource=='condition' %}
            cccd.display AS cond_code_display,
            {%- endif %}
            {#- these exceptions deal with table aliasing related to
            single table queries, where this may be a multitable query
            depending on context #}
            --noqa: disable=RF03, AL02
            {%- for col in table_cols %}
            {%- if not col.alias %}
            s."{{ col.name }}" 
            {%- else %}
            s."{{ col.name }}" AS {{ col.alias }}
            {%- endif -%}
            {{- comma_delineate(loop) -}}
            {% endfor %}
            --noqa: enable=RF03, AL02
        FROM {{ source_table }} AS s
        {%- if fhir_resource=='condition' %}
        LEFT JOIN core__condition_codable_concepts_display AS cccd
            ON s.condition_id = cccd.id
        {%- endif -%}
        {%- if fhir_resource=='document' and filter_resource %}
        WHERE (s.status = 'current')
        AND (d.docStatus IS null OR d.docStatus IN ('final', 'amended'))
        {%- elif fhir_resource=='encounter' and filter_resource %}
        WHERE s.status = 'finished'
        {%- elif fhir_resource=='observation' and filter_resource %}
        WHERE (s.status = 'final' OR status= 'amended')
        {%- endif %}
    ),
    {% endif %}
    null_replacement AS (
        SELECT
            subject_ref,
            {%- if secondary %}
            {{ secondary }}_ref,
            {%- endif -%}
            {%- if fhir_resource=='condition' %}
            coalesce(cast(cond_code_display AS varchar), 'missing-or-null') AS cond_code_display,
            {%- endif -%}
            {% for col in table_cols %}
            coalesce(
                cast("{{ column_or_alias(col) }}" AS varchar),
                'missing-or-null'
            ) AS "{{ column_or_alias(col) }}"
            {{- comma_delineate(loop) }}
            {%- endfor %}
        {%- if filter_resource %}
        FROM filtered_table
        {%- else  %}
        FROM {{ source_table }}
        {% endif %}
    ),

    powerset AS (
        SELECT
            count(DISTINCT subject_ref) AS cnt_subject,
            {%- if secondary %}
            count(DISTINCT {{ secondary }}_ref) AS cnt_{{ secondary }},
            {%- endif -%}
            {% for col in table_cols %}
            "{{ column_or_alias(col) }}"
            {{- comma_delineate(loop) }}
            {%- endfor %}
            {%- if fhir_resource=='condition' -%},
            cond_code_display
            {% endif %}
        FROM null_replacement
        GROUP BY
            cube(
                {%- for col in table_cols %}
                "{{ column_or_alias(col) }}"
                {{- comma_delineate(loop) }}
                {%- endfor %}
                {%- if fhir_resource=='condition' -%},
                cond_code_display
                {% endif %}
            )
    )

    SELECT
        {%- if secondary %}
        cnt_{{ secondary }}
        {%- else %}
        cnt_subject
        {%- endif %} AS cnt,
        {%- for col in table_cols %}
        "{{ column_or_alias(col) }}"
        {{- comma_delineate(loop) }}
        {%- endfor %}
        {%- if fhir_resource=='condition' %},
        cond_code_display
    {% endif %}
    FROM powerset
    {%- if where_clauses %}
    WHERE
        {% for clause in where_clauses %}{{ clause }}
        {% if not loop.last %}AND {% endif %}
        {%- endfor -%}
    {%- else %}
    WHERE 
        cnt_subject >= {{ min_subject }}
    {%- endif %}
);
